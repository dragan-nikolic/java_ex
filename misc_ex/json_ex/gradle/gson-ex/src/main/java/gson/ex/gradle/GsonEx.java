/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package gson.ex.gradle;

import java.util.ArrayList;
import java.util.List;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.Path;

import lombok.Value;

public class GsonEx {

    public static void main(String... args) throws Exception {
        GsonEx gsonEx = new GsonEx();

        //gsonEx.example1();
        //gsonEx.example2();
        gsonEx.example3();
    }

    public void example1() {
        String json = 
            "{"
                + "'title': 'Computing and Information systems',"
                + "'id' : 1,"
                + "'children' : 'true',"
                + "'groups' : [{"
                    + "'title' : 'Level one CIS',"
                    + "'id' : 2,"
                    + "'children' : 'true',"
                    + "'groups' : [{"
                        + "'title' : 'Intro To Computing and Internet',"
                        + "'id' : 3,"
                        + "'children': 'false',"
                        + "'groups':[]"
                    + "}]" 
                + "}]"
            + "}";

        // Now do the magic.
        Gson gson = new GsonBuilder().create();
        Data data = gson.fromJson(json, Data.class);

        // Show it.
        System.out.println(data);

    }

    public void example2() throws Exception {
        Path postsPath = Paths.get("../../json_data", "posts.json");

        byte[] postsBytes = Files.readAllBytes(postsPath);
        String json = new String(postsBytes, StandardCharsets.UTF_8);
        System.out.println("***** json *****");
        System.out.println(json);
        System.out.println("***** json e*****");

        // Now do the magic.
        Gson gson = new GsonBuilder().create();
        PostData posts = gson.fromJson(json, PostData.class);

        // Show it.
        System.out.println(posts);
    }

    public void example3() throws Exception {
        Path postsPath = Paths.get("../../json_data", "users.json");

        byte[] postsBytes = Files.readAllBytes(postsPath);
        String json = new String(postsBytes, StandardCharsets.UTF_8);
        System.out.println("***** json *****");
        System.out.println(json);
        System.out.println("***** json e*****");

        // Now do the magic.
        Gson gson = new GsonBuilder().create();
        UserData users = gson.fromJson(json, UserData.class);

        // Show it.
        System.out.println(users);

        // Get advisors
        List<User> advisors = users.getAdvisors();
        System.out.println("***** advisors *****");
        System.out.println(advisors);
    }

}

class Data {
    private String title;
    private Long id;
    private Boolean children;
    private List<Data> groups;

    public String getTitle() { return title; }
    public Long getId() { return id; }
    public Boolean getChildren() { return children; }
    public List<Data> getGroups() { return groups; }

    public void setTitle(String title) { this.title = title; }
    public void setId(Long id) { this.id = id; }
    public void setChildren(Boolean children) { this.children = children; }
    public void setGroups(List<Data> groups) { this.groups = groups; }

    public String toString() {
        return String.format("title:%s\nid:%d\nchildren:%s\ngroups:%s", title, id, children, groups);
    }
}

class PostData {
    public PageInfo pageInfo;
    public List<Post> posts;

    public String toString() {
        return String.format("pageInfo:%s\nlogo:%s", pageInfo.pageName, pageInfo.logo);
    }
}

class PageInfo {
    public String pageName;
    public String logo;
}

class Post {
    public String post_id;
    public String actor_id;
    public String author_name;
    public String post_title;
    public List<String> comments;
    public String time_of_post;
}

class UserData {
    public List<User> users;

    public String toString() {
        String res = "";
        for (User user: users) {
            res += (user.toString() + "\n");
        }
        return res;
    }

    public List<User> getType(String type) {
        System.out.println("***** getType *****");
        List<User> tusers = new ArrayList<>();

        for (User user: users) {
            System.out.println(String.format("user: %s (%s)", user, type));
            if (type.equals(user.getType())) {
                System.out.println("advisor");
                tusers.add(user);
            }
        }

        return tusers;
    }

    public List<User> getAdvisors() {
        return getType("advisor");
    }
}

@Value
class User {
    private String type;
    private String username;
    private String password;
    private Boolean canImpersonate;
    private Boolean isHomeOffice;
    private List<String> faNums;

    // public String toString() {
    //     return String.format(
    //         "user:%s, password:%s, imp:%b, ho:%b", 
    //             username,
    //             password,
    //             canImpersonate,
    //             isHomeOffice);
    // }
}
